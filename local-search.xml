<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DL基本原理</title>
    <link href="/2023/01/24/Code/DL/DL%E5%8E%9F%E7%90%86/"/>
    <url>/2023/01/24/Code/DL/DL%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>本文将基于吴恩达(Andrew)的网课第一部分内容对深度学习(deep learning)基础原理进行阐述.<br>$$公式有点难敲,再等几天$$</p>]]></content>
    
    
    <categories>
      
      <category>DL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode远程SSH连接</title>
    <link href="/2023/01/24/Code/env/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/01/24/Code/env/vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>环境:</p><ul><li>本地: windows11</li><li>腾讯云服务器: ubuntu 20.04</li></ul><ol><li><p>首先在腾讯云平台创建密钥并将公钥与你要用的实例绑定,下载私钥到本机(地址假设为D:&#x2F;&#x2F;tcf&#x2F;&#x2F;tcf.pem),</p><blockquote><p>注意:密钥绑定的是名为ubuntu的用户,所以你可以先在实例上切换用户为ubuntu观察<code>sudo su ubuntu</code></p></blockquote></li><li><p>在VSCode上下载插件Renote-SSH,然后配置ssh-configration</p></li></ol><p><img src="/../../img/blog-ssh1.png" alt="blog-ssh1"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Host tcf           //你的名字，可自取<br>    HostName 你的IP      <br>    Port 22             //SSH连接端口为22<br>    User ubuntu       //默认<br>    IdentityFile D:\tcf\tcf.pem   //你的私钥地址<br></code></pre></td></tr></table></figure><ol><li>新建一个终端，运行<code>ssh tcf</code></li></ol><p>然后Warning： 说是权限too open无法进入，大概是windows给用户的权限太多导致的一些问题</p><img src="../../img/blog-ssh2.png" alt="blog-ssh2" style="zoom:67%;" /><p><a href="%5B(22%E6%9D%A1%E6%B6%88%E6%81%AF">参考博客</a> windows ssh Permissions for “xxx“ are too open错误详细解决方案_菜到不知所措的博客-CSDN博客_are too open](<a href="https://blog.csdn.net/weixin_40415591/article/details/121661857">https://blog.csdn.net/weixin_40415591/article/details/121661857</a>))</p><p>最后保证你的权限里只有所有者一个即可。</p><img src="../../img/blog-ssh3.png" alt="blog-ssh3" style="zoom:60%;" /><p>运行<code>ssh tcf</code> ,应该能正常登陆了</p><ol start="4"><li><p>再点击左下角远程连接</p><p>然后会帮你在虚拟机端安装VSCode-Server (大概几分钟),然后就可以用VSCode进行远程开发了。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>VSCode环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>远程SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lambda 表达式 in C++</title>
    <link href="/2023/01/22/Code/CPP/lamba%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/01/22/Code/CPP/lamba%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>version</strong>: C++11引入</p><p><strong>优点：</strong></p><ul><li>声明式编程风格：就地匿名定义目标函数或函数对象，不需要额外写一个命名函数或者函数对象。(函数式编程的特点)</li><li>简洁且方便与上下文联系，有好的可读性和可维护性。</li><li>在需要的时间和地点实现功能闭包，使程序更灵活</li></ul><h3 id="lambda-表达式的概念和基本用法"><a href="#lambda-表达式的概念和基本用法" class="headerlink" title="lambda 表达式的概念和基本用法"></a>lambda 表达式的概念和基本用法</h3><p>lambda 表达式的语法形式可简单归纳如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[ capture ] ( params ) opt -&gt; ret &#123; body; &#125;;<br></code></pre></td></tr></table></figure><p>其中 capture 是捕获列表，params 是参数表( C++14后支持auto类型 )，opt 是函数选项，ret 是返回值类型，body是函数体</p><p>eg.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> f = [](<span class="hljs-type">int</span> a) -&gt; <span class="hljs-type">int</span> &#123; <span class="hljs-keyword">return</span> a + <span class="hljs-number">1</span>; &#125;;<br></code></pre></td></tr></table></figure><h3 id="使用-lambda-表达式捕获列表"><a href="#使用-lambda-表达式捕获列表" class="headerlink" title="使用 lambda 表达式捕获列表"></a>使用 lambda 表达式捕获列表</h3><p>lambda 表达式还可以通过捕获列表捕获一定范围内的变量，因此可以使用或是修改这些变量：</p><ul><li>[] 不捕获任何变量。</li><li>[&amp;] 捕获外部作用域中所有变量，并作为引用在函数体中使用（按引用捕获）。</li><li>[&#x3D;] 捕获外部作用域中所有变量，并作为副本在函数体中使用（按值捕获,不能修改此值否则会报错）。</li></ul><blockquote><p>如果实在需要改变lambda中的值，这时就需要使用上文提到过的选项mutable。<br>默认情况下，lambda函数是一个const函数，而mutable也可以取消常量性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">auto</span> f = [=]()<span class="hljs-keyword">mutable</span>&#123;<span class="hljs-keyword">return</span> a*=<span class="hljs-number">5</span>;&#125;;<span class="hljs-comment">//取消常量性,不加mutable会报错</span><br>cout &lt;&lt; <span class="hljs-built_in">f</span>() &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><ul><li>[&#x3D;，&amp;foo] 按值捕获外部作用域中所有变量，并按引用捕获 foo 变量。</li><li>[bar] 按值捕获 bar 变量，同时不捕获其他变量。</li><li>[this] 捕获当前类中的 this 指针，让 lambda 表达式拥有和当前类成员函数同样的访问权限。如果已经使用了 &amp; 或者 &#x3D;，就默认添加此选项。捕获 this 的目的是可以在 lamda 中使用当前类的成员函数和成员变量。</li></ul><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>使用lambda函数的效率与使用函数对象是一样的，都要快于函数指针。他们都能够在编译期将代码内联展开，减少函数调用的时间。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> i_ = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">auto</span> x1 = []&#123; <span class="hljs-keyword">return</span> i_; &#125;;                    <span class="hljs-comment">// error，没有捕获外部变量</span><br>        <span class="hljs-keyword">auto</span> x2 = [=]&#123; <span class="hljs-keyword">return</span> i_ + x + y; &#125;;           <span class="hljs-comment">// OK，捕获所有外部变量</span><br>        <span class="hljs-keyword">auto</span> x3 = [&amp;]&#123; <span class="hljs-keyword">return</span> i_ + x + y; &#125;;           <span class="hljs-comment">// OK，捕获所有外部变量</span><br>        <span class="hljs-keyword">auto</span> x4 = [<span class="hljs-keyword">this</span>]&#123; <span class="hljs-keyword">return</span> i_; &#125;;                <span class="hljs-comment">// OK，捕获this指针</span><br>        <span class="hljs-keyword">auto</span> x5 = [<span class="hljs-keyword">this</span>]&#123; <span class="hljs-keyword">return</span> i_ + x + y; &#125;;        <span class="hljs-comment">// error，没有捕获x、y</span><br>        <span class="hljs-keyword">auto</span> x6 = [<span class="hljs-keyword">this</span>, x, y]&#123; <span class="hljs-keyword">return</span> i_ + x + y; &#125;;  <span class="hljs-comment">// OK，捕获this指针、x、y</span><br>        <span class="hljs-keyword">auto</span> x7 = [<span class="hljs-keyword">this</span>]&#123; <span class="hljs-keyword">return</span> i_++; &#125;;              <span class="hljs-comment">// OK，捕获this指针，并修改成员的值</span><br>    &#125;<br>&#125;;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">auto</span> f1 = []&#123; <span class="hljs-keyword">return</span> a; &#125;;               <span class="hljs-comment">// error，没有捕获外部变量</span><br><span class="hljs-keyword">auto</span> f2 = [&amp;]&#123; <span class="hljs-keyword">return</span> a++; &#125;;            <span class="hljs-comment">// OK，捕获所有外部变量，并对a执行自加运算</span><br><span class="hljs-keyword">auto</span> f3 = [=]&#123; <span class="hljs-keyword">return</span> a; &#125;;              <span class="hljs-comment">// OK，捕获所有外部变量，并返回a</span><br><span class="hljs-keyword">auto</span> f4 = [=]&#123; <span class="hljs-keyword">return</span> a++; &#125;;            <span class="hljs-comment">// error，a是以复制方式捕获的，无法修改</span><br><span class="hljs-keyword">auto</span> f5 = [a]&#123; <span class="hljs-keyword">return</span> a + b; &#125;;          <span class="hljs-comment">// error，没有捕获变量b</span><br><span class="hljs-keyword">auto</span> f6 = [a, &amp;b]&#123; <span class="hljs-keyword">return</span> a + (b++); &#125;;  <span class="hljs-comment">// OK，捕获a和b的引用，并对b做自加运算</span><br><span class="hljs-keyword">auto</span> f7 = [=, &amp;b]&#123; <span class="hljs-keyword">return</span> a + (b++); &#125;;  <span class="hljs-comment">// OK，捕获所有外部变量和b的引用，并对b做自加运算</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">auto</span> f = [=]&#123; <span class="hljs-keyword">return</span> a; &#125;;      <span class="hljs-comment">// 按值捕获外部变量</span><br><span class="hljs-keyword">auto</span> g = [&amp;]&#123; <span class="hljs-keyword">return</span> a; &#125;;      <span class="hljs-comment">// 按值捕获外部变量</span><br>a += <span class="hljs-number">1</span>;                         <span class="hljs-comment">// a被修改了</span><br>std::cout &lt;&lt; <span class="hljs-built_in">f</span>() &lt;&lt;<span class="hljs-built_in">g</span>() &lt;&lt; std::endl;  <span class="hljs-comment">// 输出01,注意.</span><br></code></pre></td></tr></table></figure><h3 id="lambda-表达式的类型"><a href="#lambda-表达式的类型" class="headerlink" title="lambda 表达式的类型"></a>lambda 表达式的类型</h3><p>lambda 表达式的类型在 C++11 中被称为“闭包类型（Closure Type）”。它是一个特殊的，匿名的非 nunion 的类类型。</p><p>因此，我们可以认为它是一个带有 operator() 的类，即仿函数。因此，我们可以使用 std::function 和 std::bind 来存储和操作 lambda 表达式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>)&gt;  f1 = [](<span class="hljs-type">int</span> a)&#123; <span class="hljs-keyword">return</span> a; &#125;;<br>std::function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">void</span>)&gt; f2 = std::<span class="hljs-built_in">bind</span>([](<span class="hljs-type">int</span> a)&#123; <span class="hljs-keyword">return</span> a; &#125;, <span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p>另外，对于没有捕获任何变量的 lambda 表达式，还可以被转换成一个普通的函数指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-type">func_t</span> = <span class="hljs-built_in">int</span>(*)(<span class="hljs-type">int</span>);<br><span class="hljs-type">func_t</span> f = [](<span class="hljs-type">int</span> a)&#123; <span class="hljs-keyword">return</span> a; &#125;;<br><span class="hljs-built_in">f</span>(<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p>lambda 表达式可以说是就地定义仿函数闭包的“语法糖”。它的捕获列表捕获住的任何外部变量，最终均会变为闭包类型的成员变量。而一个使用了成员变量的类的 operator()，如果能直接被转换为普通的函数指针，那么 lambda 表达式本身的 this 指针就丢失掉了。而没有捕获任何外部变量的 lambda 表达式则不存在这个问题。</p><h4 id="转化为函数指针"><a href="#转化为函数指针" class="headerlink" title="转化为函数指针"></a>转化为函数指针</h4><p>需要注意的是，没有捕获变量的 lambda 表达式可以直接转换为函数指针，而捕获变量的 lambda 表达式则不能转换为函数指针。看看下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*Ptr)</span><span class="hljs-params">(<span class="hljs-type">int</span>*)</span></span>;<br>Ptr p = [](<span class="hljs-type">int</span>* p)&#123;<span class="hljs-keyword">delete</span> p;&#125;;  <span class="hljs-comment">// 正确，没有状态的lambda（没有捕获）的lambda表达式可以直接转换为函数指针</span><br>Ptr p1 = [&amp;](<span class="hljs-type">int</span>* p)&#123;<span class="hljs-keyword">delete</span> p;&#125;;  <span class="hljs-comment">// 错误，有状态的lambda不能直接转换为函数指针</span><br></code></pre></td></tr></table></figure><h3 id="【实例】lambda-表达式代替函数对象的示例。"><a href="#【实例】lambda-表达式代替函数对象的示例。" class="headerlink" title="【实例】lambda 表达式代替函数对象的示例。"></a>【实例】lambda 表达式代替函数对象的示例。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CountEven</span><br>&#123;<br>    <span class="hljs-type">int</span>&amp; count_;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CountEven</span>(<span class="hljs-type">int</span>&amp; count) : <span class="hljs-built_in">count_</span>(count) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!(val &amp; <span class="hljs-number">1</span>))       <span class="hljs-comment">// val % 2 == 0</span><br>        &#123;<br>            ++ count_;<br>        &#125;<br>    &#125;<br>&#125;;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; v = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br><span class="hljs-type">int</span> even_count = <span class="hljs-number">0</span>;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">CountEven</span>(even_count));<br>std::cout &lt;&lt; <span class="hljs-string">&quot;The number of even is &quot;</span> &lt;&lt; even_count &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>用lambda函数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;<span class="hljs-type">int</span>&gt; v = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br><span class="hljs-type">int</span> even_count = <span class="hljs-number">0</span>;<br>for_each( v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), [&amp;even_count](<span class="hljs-type">int</span> val)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!(val &amp; <span class="hljs-number">1</span>))  <span class="hljs-comment">// val % 2 == 0</span><br>            &#123;<br>                ++ even_count;<br>            &#125;<br>        &#125;);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;The number of even is &quot;</span> &lt;&lt; even_count &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lambda表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C/C++基础补充</title>
    <link href="/2023/01/22/Code/CPP/cpp_study/"/>
    <url>/2023/01/22/Code/CPP/cpp_study/</url>
    
    <content type="html"><![CDATA[<h1 id="C-x2F-C-知识巩固"><a href="#C-x2F-C-知识巩固" class="headerlink" title="C&#x2F;C++ 知识巩固"></a>C&#x2F;C++ 知识巩固</h1><h3 id="C函数指针"><a href="#C函数指针" class="headerlink" title="C函数指针"></a>C函数指针</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//定义一个函数指针pFUN，它指向一个返回类型为char，有一个整型的参数的函数</span><br><span class="hljs-built_in">char</span> (*pFun)(<span class="hljs-type">int</span>);<br><span class="hljs-comment">//定义一个返回类型为char，参数为int的函数</span><br><span class="hljs-comment">//从指针层面上理解该函数，即函数的函数名实际上是一个指针，</span><br><span class="hljs-comment">//该指针指向函数在内存中的首地址</span><br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">glFun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; a;<br>    <span class="hljs-comment">//return a;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//将函数glFun的地址赋值给变量pFun</span><br>    pFun = glFun;<br><span class="hljs-comment">//*pFun”显然是取pFun所指向地址的内容，当然也就是取出了函数glFun()的内容，然后给定参数为2。</span><br>    (*pFun)(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用而typedef可以让函数指针更直观方便</p><p><strong>形式2：typedef  返回类型(*新类型)(参数表)</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">char</span> <span class="hljs-params">(*PTRFUN)</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>; <br>PTRFUN pFun; <br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">glFun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123; <span class="hljs-keyword">return</span>;&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br>    pFun = glFun; <br>    (*pFun)(<span class="hljs-number">2</span>); <br>&#125;<br><span class="hljs-comment">//typedef的作用：将声明变量得到的结果（变量名）提升为类型,也就是说pfunc现在是一种和函数指针类型等价的类型。</span><br></code></pre></td></tr></table></figure><h3 id="union-共用体"><a href="#union-共用体" class="headerlink" title="union 共用体"></a>union 共用体</h3><p>事实上我们用到共用体并不多，一个常见的实例是形容某学校的老师和学生，学生存储分数而老师存储课程名字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">char</span> profession;<br>    <span class="hljs-keyword">union</span>&#123;<br>        <span class="hljs-type">float</span> score;<br>        <span class="hljs-type">char</span> course[<span class="hljs-number">20</span>];<br>    &#125; sc;<br>&#125; bodys[TOTAL];<br></code></pre></td></tr></table></figure><p>要理解可以测试以下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">union</span> <span class="hljs-title class_">content</span>&#123;<br>  <span class="hljs-type">int</span> num;<br>  <span class="hljs-type">char</span> ch;<br>  <span class="hljs-type">double</span> dbnum;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">point</span><br>&#123; <span class="hljs-type">int</span> x;<br>  <span class="hljs-type">int</span> y;<br>  <span class="hljs-type">int</span> z;&#125;;<br><span class="hljs-keyword">union</span> <span class="hljs-title class_">gaze</span><br>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">point</span> p;<br>    <span class="hljs-type">int</span> data ;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">union</span> <span class="hljs-title class_">content</span> text ;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sizeof(text)&quot;</span>&lt;&lt;<span class="hljs-built_in">sizeof</span>(text)&lt;&lt;std::endl;<br>    text.num=<span class="hljs-number">3</span>;<br>    text.ch =<span class="hljs-string">&#x27;g&#x27;</span>;<br>    text.dbnum = <span class="hljs-number">6</span>;<span class="hljs-comment">//可在这三步设置断点查看各值</span><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;text.num= &quot;</span>&lt;&lt;text.num&lt;&lt;std::endl;<br>   <span class="hljs-comment">//条件编译指令</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-keyword">union</span> <span class="hljs-title class_">gaze</span> a;<br>    a.p.x=<span class="hljs-number">3</span>;<br>    a.p.y=<span class="hljs-number">4</span>;<br>    a.p.z=<span class="hljs-number">5</span>;<br>    a.data =<span class="hljs-number">100</span>;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;a.p.z=&quot;</span>&lt;&lt;a.p.y&lt;&lt;<span class="hljs-string">&quot;\t a.data=&quot;</span>&lt;&lt;a.data&lt;&lt;std::endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="union和struct内存占用"><a href="#union和struct内存占用" class="headerlink" title="union和struct内存占用"></a>union和struct内存占用</h4><p>     区别于struct ,虽然语法基本一致，但是结构体和共用体的区别在于：结构体的各个成员会占用不同的内存，互相之间没有影响；而共用体的所有成员占用同一段内存，修改一个成员会影响其余所有成员。</p><p>结构体占用的内存大于等于所有成员占用的内存的总和（成员之间可能会存在缝隙）采用内存对齐模式^{1}，共用体占用的内存等于最长的成员占用的内存。共用体使用了内存覆盖技术，同一时刻只能保存一个成员的值，如果对新的成员赋值，就会把原来成员的值覆盖掉。故其占用内存为共用数据类型中最大的那个。</p><blockquote> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">HF</span>&#123;<span class="hljs-comment">// memory For struct </span><br> <span class="hljs-type">int</span> data;<br> <span class="hljs-type">char</span>* name;<br> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> rank;<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中data和name都是 4 bytes而rank本应该是1bytes  ,但由于内存对齐，故<code>sizeof(HF)</code>的结果应该是12.<br>此外注意<code>char* name</code>为char型指针，占用内存和指向字符串长度无关。而<br><code>char[10] name</code> 则<code>sizeof(name)=10</code></p></blockquote><h3 id="const的用法"><a href="#const的用法" class="headerlink" title="const的用法"></a>const的用法</h3><p>  const名叫常量限定符，用来限定特定变量，以通知编译器该变量是不可修改的。习惯性的使用const，可以避免在函数中对某些不应修改的变量造成可能的改动。<br>常类型的对象必须进行初始化，而且不能被更新。<br>const的用法大致可分为以下几个方面：</p><p>(1)const修饰基本数据类型</p><p>(2)const应用到函数中</p><p>(3)const在类中的用法</p><p>(4)const修饰类对象，定义常量对象 </p><h4 id="1-const修饰基本数据类型"><a href="#1-const修饰基本数据类型" class="headerlink" title="1.const修饰基本数据类型"></a>1.const修饰基本数据类型</h4><ul><li>1.const修饰一般常量及数组</li></ul><p> <code>const int a=10; // 等价的书写方式：     int const a=10;</code><br> <code>const int arr[3]=&#123;1,2,3&#125;;           //      int const arr[3]=&#123;1,2,3&#125;;</code></p><ul><li><p>2.const修饰指针变量*及引用变量&amp;</p><p>A: const 修饰指针指向的内容，则内容为不可变量。<br>B: const 修饰指针，则指针为不可变量。<br>C: const 修饰指针和指针指向的内容，则指针和指针指向的内容都为不可变量。<br>对于 A:<br><code>const int *p = 8;</code><br>则指针指向的内容 8 不可改变。简称左定值，因为 const 位于 * 号的左边。<br>对于 B:</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> p = &amp;a;<br>*p = <span class="hljs-number">9</span>; <span class="hljs-comment">// 正确</span><br><span class="hljs-type">int</span>  b = <span class="hljs-number">7</span>;<br>p = &amp;b; <span class="hljs-comment">// 错误</span><br></code></pre></td></tr></table></figure><p>对于 const 指针 p 其指向的内存地址不能够被改变，但其内容可以改变。简称，右定向。因为 const 位于 * 号的右边。<br>对于 C: 则是 A 和 B的合并<br>int a &#x3D; 8;<br>const int * const  p &#x3D; &amp;a;<br>这时，const p 的指向的内容和指向的内存地址都已固定，不可改变。</p><p>对于 A，B，C 三种情况，根据 const 位于 * 号的位置不同，我总结三句话便于记忆的话：”左定值，右定向，const修饰不变量”。</p><ul><li>关于引用<br>1、普通引用<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp">① <span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; <br>  <span class="hljs-type">int</span> &amp;ri = i;    <span class="hljs-comment">//正确，引用绑定到int 变量i上</span><br> <br>② <span class="hljs-type">double</span> d = <span class="hljs-number">3.1415</span>；<br>  <span class="hljs-type">int</span> &amp;rd = d;   <span class="hljs-comment">//错误， 引用类型为 int ，所绑定对象类型为 double，类型不一致</span><br> <br>③ <span class="hljs-type">int</span> &amp; rm = <span class="hljs-number">3</span>； <span class="hljs-comment">//错误， 普通引用必须绑定到对象，不能绑定至常量</span><br> <br><span class="hljs-number">2</span>、<span class="hljs-type">const</span>修饰引用<br><br>① <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;ci = <span class="hljs-number">3</span>; <span class="hljs-comment">//正确，整型字面值常量绑定到 const引用</span><br><span class="hljs-comment">//c++编译器  会  分配内存空间  ,c++编译器把ci放在符号表中</span><br>   <span class="hljs-comment">//  int  temp  =  3 </span><br>   <span class="hljs-comment">//  const  int  &amp;ci  =  temp;</span><br>②<span class="hljs-number">1</span>） <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>；<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;cj = i;    <span class="hljs-comment">//正确，非常量对象绑定到 const引用</span><br>    <span class="hljs-comment">//cj=2;// 错误 cj被const修饰，不可以改变</span><br>    i=<span class="hljs-number">3</span>;<span class="hljs-comment">//正确，i可以被修改，cj也被更改，cout&lt;&lt;cj时为3</span><br>    <span class="hljs-type">int</span> &amp;cj2 = i; <br>    cj2=<span class="hljs-number">5</span>;<span class="hljs-comment">//正确，i被修改，cj也被更改，cout&lt;&lt;cj时为5</span><br> <br><span class="hljs-number">2</span>） <span class="hljs-type">double</span> i= <span class="hljs-number">1.2</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;cj = i;    <span class="hljs-comment">//正确，非常量对象绑定到 const引用</span><br>    <span class="hljs-comment">//cj=2.3;// 错误 cj被const修饰，不可以改变</span><br>    i=<span class="hljs-number">3.3</span>;<span class="hljs-comment">//正确，i可以被修改，cj没有被更改，cout&lt;&lt;cj时为1</span><br>    <span class="hljs-type">double</span> &amp;cj2 = i; <br>    cj2=<span class="hljs-number">5.2</span>;<span class="hljs-comment">//正确，i被修改为5.2，cj2被更改,为5.2，cj没有被更改，cout&lt;&lt;cj时为1</span><br> <br>原因：引用变量类型为<span class="hljs-type">int</span>，被引用对象类型为<span class="hljs-type">double</span>。<br>在进行<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;cj = i;前，进行了如下操作<br> <span class="hljs-type">double</span> i= <span class="hljs-number">1.2</span>;<br> <span class="hljs-type">int</span> temp = i;<br> <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;cj = temp;<span class="hljs-comment">//所以cj并未真正绑定对象i</span><br> <br>③ <span class="hljs-type">const</span> <span class="hljs-type">int</span> i = <span class="hljs-number">4</span>； <br>  <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;ck =  i; <span class="hljs-comment">//正确，常量对象绑定到 const引用</span><br> <br>④ <span class="hljs-type">const</span> <span class="hljs-type">int</span> i = <span class="hljs-number">5</span>；<br>    <span class="hljs-type">int</span> &amp;r = i;    <span class="hljs-comment">//错误，常量对象绑定到非const引用</span><br></code></pre></td></tr></table></figure><strong>结论：</strong><br>const 引用的目的是,禁止通过修改引用值来改变被引用的对象。<br>1）const int &amp; e 相当于 const int * const e<br>2）普通引用 相当于 int *const e<br>3）当使用常量（字面量）对const引用进行初始化时，C++编译器会为常量值<br>分配空间，并将引用名作为这段空间的别名<br>4）使用字面量对const引用初始化后，将生成一个只读变量</li></ul><h4 id="2-作为函数返回值的const修饰符"><a href="#2-作为函数返回值的const修饰符" class="headerlink" title="2.作为函数返回值的const修饰符"></a>2.作为函数返回值的const修饰符</h4><p>其实，不论是参数还是返回值，道理都是一样的，参数传入时候和函数返回的时候，初始化const变量<br>      1      修饰参数的const，如 void fun0(const A* a ); void fun1(const A&amp; a);<br>      调用函数的时候，用相应的变量初始化const常量，则在函数体中，按照const所修饰的部分进行常量化，如形参为const A* a，<br>则不能对传递进来的指针的内容进行改变，保护了原指针所指向的内容；如形参为const A&amp; a，则不能对传递进来的引用对象进行改变，保护了原对象的属性。<br>     [注意]：参数const通常用于参数为指针或引用的情况;<br>     2      修饰返回值的const，如const A fun2( ); const A* fun3( );<br>         这样声明了返回值后，const按照”修饰原则”进行修饰，起到相应的保护作用。</p><blockquote><p>一般用const修饰返回值为对象本身（非引用和指针）的情况多用于二目操作符重载函数并产生新对象的时候</p></blockquote><h4 id="3-类中常量（const的特殊用法）"><a href="#3-类中常量（const的特殊用法）" class="headerlink" title="3.类中常量（const的特殊用法）"></a>3.类中常量（const的特殊用法）</h4><p> 1.使用枚举类型 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span><br>&#123;<br>     <span class="hljs-keyword">enum</span> &#123; SIZE1 = <span class="hljs-number">10</span>, SIZE2 = <span class="hljs-number">20</span>&#125;; <span class="hljs-comment">// 枚举常量</span><br>     <span class="hljs-type">int</span> array1[SIZE1];  <br>     <span class="hljs-type">int</span> array2[SIZE2];<br>&#125;;<br></code></pre></td></tr></table></figure><p>2.使用const 或static<br>     C++11仅不允许在类声明中初始化static非const类型的数据成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// using c++11 standard</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CTest11</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> a = <span class="hljs-number">3</span>; <span class="hljs-comment">// Ok in C++11</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> b = <span class="hljs-number">4</span>;       <span class="hljs-comment">// Error</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> c = <span class="hljs-number">5</span>;        <span class="hljs-comment">// Ok in C++11</span><br>    <span class="hljs-type">int</span> d = <span class="hljs-number">6</span>;              <span class="hljs-comment">// Ok in C++11</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CTest11</span>() :<span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>) &#123; &#125;     <span class="hljs-comment">// Ok in C++11</span><br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CTest11 testObj;<br>    cout &lt;&lt; testObj.a &lt;&lt; testObj.b &lt;&lt; testObj.c &lt;&lt; testObj.d &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Test</span>(<span class="hljs-type">int</span> _m,<span class="hljs-type">int</span> <span class="hljs-type">_t</span>):_cm(_m),_ct(<span class="hljs-type">_t</span>)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Kf</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        ++_cm; <span class="hljs-comment">// 错误</span><br>        ++_ct; <span class="hljs-comment">// 正确</span><br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> _cm;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> _ct;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Test <span class="hljs-title">t</span><span class="hljs-params">(<span class="hljs-number">8</span>,<span class="hljs-number">7</span>)</span></span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有关动态分配内存与内存泄漏"><a href="#有关动态分配内存与内存泄漏" class="headerlink" title="有关动态分配内存与内存泄漏"></a>有关动态分配内存与内存泄漏</h3><p>前提1.指定变量的地址，编译器在函数结束后会自动释放内存，如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;    <span class="hljs-type">int</span> a=<span class="hljs-number">100</span>; <span class="hljs-type">int</span>* p= &amp;a&#125;;<span class="hljs-comment">//分配在栈空间</span><br></code></pre></td></tr></table></figure><p>但是,动态申请内存(比如new或者malloc,realloc)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-type">int</span> *p = <span class="hljs-keyword">new</span> a[<span class="hljs-number">100</span>];<span class="hljs-comment">//分配在堆空间</span><br> <span class="hljs-keyword">delete</span>[] p ;<span class="hljs-comment">//记得申请了多位内存加上方括号</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实际情况中，由于数据的传来传去，到何处释放内存就成了一个复杂的问题，就容易忘记释放内存。</p><p>*现代C++利用智能指针可以解决这类问题</p><p>C++11后nullptr代替NULL但比NULL更安全(有时NULL会被编译器误解成int 型?)</p><h3 id="C-内联函数"><a href="#C-内联函数" class="headerlink" title="C++ 内联函数"></a>C++ 内联函数</h3><p><strong>内联函数inline：</strong>引入内联函数的目的是为了解决程序中函数调用的效率问题</p><p>程序在编译器编译的时候，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体进行替换，而对于其他的函数，都是在运行时候才被替代。这其实就是个空间代价换时间的节省。所以内联函数一般都是1-5行的小函数。在使用内联函数时要留神：</p><ul><li><p>1.在内联函数内不允许使用循环语句和开关语句；</p></li><li><p>2.内联函数的定义必须出现在内联函数第一次调用之前；</p></li><li><p>3.类结构中所在的类说明内部定义的函数是内联函数。</p><p>有些函数即使声明为内联的也不一定会被编译器内联, 这点很重要; 比如虚函数和递归函数就不会被正常内联. 通常, 递归函数不应该声明成内联函数.(递归调用堆栈的展开并不像循环那么简单, 比如递归层数在编译时可能是未知的, 大多数编译器都不支持内联递归函数). 虚函数内联的主要原因则是想把它的函数体放在类定义内, 为了图个方便, 抑或是当作文档描述其行为, 比如精短的存取函数.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>const</tag>
      
      <tag>内存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode上实现cmake工程下的调试配置</title>
    <link href="/2023/01/22/Code/env/vscode_config/"/>
    <url>/2023/01/22/Code/env/vscode_config/</url>
    
    <content type="html"><![CDATA[<h1 id="在vscode上实现多文件cmake工程下的调试"><a href="#在vscode上实现多文件cmake工程下的调试" class="headerlink" title="在vscode上实现多文件cmake工程下的调试"></a>在vscode上实现多文件cmake工程下的调试</h1><p><strong>环境: ubuntu-VMware  (中科大-vlab)</strong></p><p>文件结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">├──.vscode<br>│   ├── tasks.json<br>│   ├── launch.json<br>├── build<br>..<br>├── CMakeLists.txt<br>├── include<br>│   ├── Gun.h<br>│   └── Soider.h<br>├── main.cpp<br>└── src<br>    ├── Gun.cpp<br>    └── Soider.cpp<br></code></pre></td></tr></table></figure><p>如果是利用g++构建，command应该为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd build<br>cmake ..<br>make<br></code></pre></td></tr></table></figure><p>然后调用gdb进行调试(但是命令行gdb感觉还是不太习惯，于是使用vscode)</p><blockquote><p>本文参考了网上一些blog,仅用于学习使用</p><p>本文只是讲解如何读懂和修改两个.json文件仅用于帮助我们工程的运行与调试，并不着力.json的开发，不会讨论其背后的原理。</p><p>下面只是讨论一个例子(实验)，并不完全适用于模板</p></blockquote><h2 id="task环境配置"><a href="#task环境配置" class="headerlink" title="task环境配置"></a>task环境配置</h2><p>具体我是看的这个中文版教程<a href="https://geek-docs.com/vscode/vscode-tutorials/vscode-task-system-configuration-grouping-and-result-display.html">VSCode 任务系统配置 – 分组和结果显示|极客教程 (geek-docs.com)</a>，但是一般可以套用模板，只要实际应用中改相应几个参数就行。</p><p><strong>第一个属性是 label 标签</strong>，就是这个任务的名字。我们在命令面板里执行任务会需要读到它，所以它的值应该尽可能地描述这个任务是干什么的。</p><p><strong>第二个属性是 type 类型</strong>。对于自定义的任务来说，这个类型可以有两种选择，一种是这个任务被当作进程来运行，另一种则是在 shell 中作为命令行来运行。默认情况下我们会在 shell 下运行，而且这个 shell 命令行将会在集成终端里执行，shell 的选择则会尊重我们在集成终端的配置。比如在我的例子中，系统默认的 shell 是 zsh，那么当我运行这个脚本时，就会在 zsh 里执行。</p><p><strong>第三个属性是命令command</strong>(和args)，它代表着我们希望在 shell 中运行哪一个命令，或者我们希望运行哪个程序。</p><blockquote><p>对于不同的操作系统，可以使用特定的标签</p><p>比如我们可以为 Windows 或者 Linux 系统指定特定的地址，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-comment">// 任务一： 创建 build 文件夹</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CreateBuildDir&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// lable 标记任务名称</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mkdir&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 命令</span><br>            <span class="hljs-comment">// 传给上面命令的参数，这里是传给 Unix 系统的参数，windows下稍有不用，下边有</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-p&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;build&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;windows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;shell&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;executable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell.exe&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>   <span class="hljs-comment">// 对于windows系统，传的参数</span><br>                    <span class="hljs-string">&quot;-Force&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;build&quot;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 任务二： Cmake</span><br>        <span class="hljs-comment">// 在 build 文件夹中调用 cmake 进行项目配置</span><br>        <span class="hljs-comment">// 如果想配置比如 release 还是 debug 可以添加参数或者在</span><br>        <span class="hljs-comment">// CMakeLists.txt中设置也行</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmakeRun&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 给这个任务起个名字</span><br><span class="hljs-comment">// 这里的cmake，用我后面小程序创建的结果填的是全路径，</span><br><span class="hljs-comment">// 命令写全路径，则路径中不能包含带空格</span><br><span class="hljs-comment">// 如果你添加了环境变量，那么直接填写命令即可，也不会有</span><br><span class="hljs-comment">// 路径是否包含空格的问题（下面的命令同理）</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmake&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;-DCMAKE_MAKE_PROGRAM=E:\\Resource\\mingw64\\bin\\mingw32-make.exe&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// MinGW目录下bin目录下的mingw32-make.exe</span><br>                <span class="hljs-string">&quot;-G&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-comment">// 不使用-G &quot;Unix Makefiles&quot; 参数可能会编译成了VS用的工程文件</span><br>                <span class="hljs-comment">// 之所以三个斜杠，是因为vscode终端自己还要转义一次</span><br>                <span class="hljs-comment">// 2021-01-21更新：我在32位的win7上发现，vscode自己又不转义了</span><br>                <span class="hljs-comment">// 所以如果以下三个斜杠不行的话，大家手动改成一个斜杠就好，即\&quot;Unix Makefiles\&quot;</span><br>                <span class="hljs-comment">// 后面我给的小程序默认写的是3个</span><br>                <span class="hljs-string">&quot;\\\&quot;Unix Makefiles\\\&quot;&quot;</span><span class="hljs-punctuation">,</span>  <br>                <span class="hljs-string">&quot;../&quot;</span>  <span class="hljs-comment">// ../ 表示build文件夹的上级目录，CMakeLists.txt就放在上级目录中</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;dependsOn&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;CreateBuildDir&quot;</span>  <span class="hljs-comment">// 表示在 创建目录 任务结束后进行</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 任务三： make编译</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;makeRun&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mingw32-make&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 这个也是MinGW目录下bin目录下的mingw32-make.exe，如果添加了环境变量，这里直接写mingw32-make.exe</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 注意这里是编译到了项目文件夹下的 build 文件夹里面，这里就解释了</span><br>            <span class="hljs-comment">// 为什么 launch.json 中 program 路径要那么设置了。</span><br>            <span class="hljs-attr">&quot;dependsOn&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;cmakeRun&quot;</span>  <span class="hljs-comment">// 表示在Cmake任务结束后进行</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><p>于是在我这个样例中可以这样写:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;   <br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;options&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span> <span class="hljs-comment">//注意提前创建</span><br>    &#125;,<br>    <span class="hljs-string">&quot;tasks&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,<br>            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;cmake&quot;</span>,<br>            <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;cmake&quot;</span>,      <span class="hljs-comment">//这里根据你具体工程源文件设置</span><br>            <span class="hljs-string">&quot;args&quot;</span>: [<br>                <span class="hljs-string">&quot;..&quot;</span><br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;make&quot;</span>,        <span class="hljs-comment">//</span><br>            <span class="hljs-string">&quot;group&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;build&quot;</span>,<br>                <span class="hljs-string">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span><br>            &#125;,<br>            <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;make&quot;</span>,<br>            <span class="hljs-string">&quot;args&quot;</span>: [<br><br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;Build&quot;</span>,<br><span class="hljs-string">&quot;dependsOrder&quot;</span>: <span class="hljs-string">&quot;sequence&quot;</span>, <span class="hljs-comment">// 按列出的顺序执行任务依赖项</span><br>            <span class="hljs-string">&quot;dependsOn&quot;</span>:[<br>                <span class="hljs-string">&quot;cmake&quot;</span>,<br>                <span class="hljs-string">&quot;make&quot;</span><br>            ]<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="launch环境配置"><a href="#launch环境配置" class="headerlink" title="launch环境配置"></a>launch环境配置</h2><p>当我们按下按钮后，VS Code 询问我们想要创建什么项目的调试配置，这里我们再次选择 Node.js。然后我们就能够看到 .vscode 文件夹下 launch.json 文件被创建出来了，它的内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span><br> <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br> <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br> <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;启动程序&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个 JSON 文件里的 configurations 的值就是当前文件夹下所有的配置了。现在我们只有一个调试配置，它有四个属性：</p><p><strong>第一个是 type</strong>，代表着调试器的类型。它决定了 VS Code 会使用哪个调试插件来调试代码。</p><p><strong>第二个是 request</strong>，代表着该如何启动调试器。如果我们的代码已经运行起来了，则可以将它的值设为 attach，那么我们则是使用调试器来调试这个已有的代码进程；而如果它的值是 launch，则意味着我们会使用调试器直接启动代码并且调试。</p><p><strong>第三个属性 name</strong>，就是这个配置的名字了。</p><p><strong>第四个属性 program</strong>，就是告诉 Node.js 调试器，我们想要调试哪个文件。这个值支持预定义参数，比如在上面的例子里，我们使用了${file}，也就是当前编辑器里打开的文件。</p><p>不过使用这个配置，并没有解决刚才上面我提的问题，如果所有文件都被关闭了，那么${file} 就是空的了，这个调试配置并不能正确运行。</p><p>下面我们把 program 的值改为 <code>$&#123;workspaceFolder&#125;/index.js</code>，其中<code>$&#123;workspaceFolder&#125;</code> 是代表当前工作区文件夹地址的预定义参数，使用它就能够准确地定位当前工作区里 <code>index.js</code> 文件了。（关于在配置文件里可以使用的预定义参数，请参考<a href="https://code.visualstudio.com/docs/editor/variables-reference">Visual Studio Code Variables Reference</a>。 ）</p><p>windows端配置如下，(linux感觉是下面删减去不必要的东西,地址记得吧&#x2F;&#x2F;换成&#x2F;)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span><br>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;configurations&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;g++.exe - 生成和调试活动文件&quot;</span>,<br>             <span class="hljs-comment">// type 告诉vscode编译器的类型，我用的MinGW64也就是g++，这里是cppdgb</span><br>             <span class="hljs-comment">// 这个是规定的，不是随便写，比如msvc编译器就是cppvsdbg</span><br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;cppdbg&quot;</span>, <br>            <span class="hljs-comment">//这个这里只能是launch</span><br>            <span class="hljs-string">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-comment">// program 这个是你的可执行程序位置，这里可以根据自己的tasks.json生成</span><br>            <span class="hljs-comment">// 程序的位置自定义修改，等会参照后面的tasks.json内容</span><br>            <span class="hljs-string">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;workspaceRootFolderName&#125;.exe&quot;</span>,<br>            <span class="hljs-comment">// $&#123;xxxx&#125;是vscode内置的变量，可以方便获取到需要的路径或者文件名,</span><br>            <span class="hljs-comment">// $&#123;workspaceFolder&#125; :表示当前workspace文件夹路径，也即/home/Coding/Test</span><br><span class="hljs-comment">// $&#123;workspaceRootFolderName&#125;:表示workspace的文件夹名，也即Test</span><br><span class="hljs-comment">// $&#123;file&#125;:文件自身的绝对路径，也即/home/Coding/Test/.vscode/tasks.json</span><br><span class="hljs-comment">// $&#123;relativeFile&#125;:文件在workspace中的路径，也即.vscode/tasks.json</span><br><span class="hljs-comment">// $&#123;fileBasenameNoExtension&#125;:当前文件的文件名，不带后缀，也即tasks</span><br><span class="hljs-comment">// $&#123;fileBasename&#125;:当前文件的文件名，tasks.json</span><br><span class="hljs-comment">// $&#123;fileDirname&#125;:文件所在的文件夹路径，也即/home/Coding/Test/.vscode</span><br><span class="hljs-comment">// $&#123;fileExtname&#125;:当前文件的后缀，也即.json</span><br><span class="hljs-comment">// $&#123;lineNumber&#125;:当前文件光标所在的行号</span><br><span class="hljs-comment">// $&#123;env:PATH&#125;:系统中的环境变量</span><br>            <span class="hljs-string">&quot;args&quot;</span>: [], <br>            <span class="hljs-string">&quot;stopAtEntry&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,<br>            <span class="hljs-string">&quot;environment&quot;</span>: [],<br>            <span class="hljs-string">&quot;externalConsole&quot;</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">&quot;MIMode&quot;</span>: <span class="hljs-string">&quot;gdb&quot;</span>,<br>            <span class="hljs-comment">// 调试器的路径</span><br>            <span class="hljs-string">&quot;miDebuggerPath&quot;</span>: <span class="hljs-string">&quot;D:\\program\\mingw64\\bin\\gdb.exe&quot;</span>,<br>            <span class="hljs-string">&quot;setupCommands&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;为 gdb 启用整齐打印&quot;</span>,<br>                    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span>,<br>                    <span class="hljs-string">&quot;ignoreFailures&quot;</span>: <span class="hljs-literal">true</span><br>                &#125;<br>            ],<br>            <span class="hljs-comment">// preLaunchTask 表示在 执行调试前 要完成的任务</span><br>            <span class="hljs-comment">// 比如这里 要完成 makeRun 这个tasks任务（重新生成程序）</span><br>            <span class="hljs-comment">// 这里的 makeRun 是 tasks.json 中 lable 标记的任务名称</span><br>            <span class="hljs-string">&quot;preLaunchTask&quot;</span>: <span class="hljs-string">&quot;makeRun&quot;</span>,<br>        &#125;<br>    ]<br>&#125;<br><span class="hljs-comment">// 上面没有注释的部分基本都是默认生成的，可以不用更改的部分</span><br></code></pre></td></tr></table></figure><p>在这个例子中，我们这样写:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span><br>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++.exe - 生成和调试活动文件&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/build/my_cmake&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;为 gdb 启用整齐打印&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>VSCode环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/2023/01/22/firstblog/"/>
    <url>/2023/01/22/firstblog/</url>
    
    <content type="html"><![CDATA[<h1 id="First-Blog"><a href="#First-Blog" class="headerlink" title="First Blog"></a>First Blog</h1><p>As you can see ,这是一个基于Hexo的Blog<br>&#x2F;&#x2F;测试code:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>A = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]])<br></code></pre></td></tr></table></figure><p><img src="/../img/logo.PNG" alt="中科大logo"><br>&#x2F;&#x2F;测试LATEX<br>$$x&#x3D;\frac12\mu$$ </p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/20/hello-world/"/>
    <url>/2023/01/20/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="for-more"><a href="#for-more" class="headerlink" title="for more"></a>for more</h2><p>感觉还不错<br>have a try</p>]]></content>
    
    
    <categories>
      
      <category>Help</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
